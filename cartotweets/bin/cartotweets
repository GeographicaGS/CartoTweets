#!/usr/bin/env node
var l = require('log4js').getLogger();
var CONFIG = require('../config');
var argv = require('yargs').argv;
var db = require("../db/db");

l.setLevel(CONFIG.log_level);
var locations = '';
var hashtags = '';

//Getting params:
if (argv.hashtags) {
    var hashtags = argv.hashtags.trim();
}
if (argv.locations) {
    var locations = argv.locations.trim();
}

//Twitter API needs at least one filter, so let's give it a good one by default:
if (!hashtags && !locations) {
    locations = '-180,-90,180,90'; //world-wide
}

//A useful hashtags format:
var tags_array = (hashtags.length > 0)?hashtags.split(','):[];
tags_array = tags_array.map(function(tag){return tag.toLowerCase()});

db.init(function(err){
    if (err){
        throw err;
    }

    //Examples:
    //  Spain: -18.160788,27.637894,4.327784,43.791322
    //  World-wide: -180,-90,180,90
    var stream_options = {};
    if (hashtags !== '') {
        stream_options.track = hashtags;
    }
    if (locations !== '' ){
        stream_options.locations = locations;
    }

    var TweetStream = require('../lib/TweetStream');
    var ts = new TweetStream(CONFIG.twitter_auth_config, stream_options);

    l.info('Getting tweets...');
    l.debug('Locations: %s', locations);
    l.debug('Hashtags: %s', hashtags);
    l.debug('Tablename: %s', CONFIG.tweets_table_name);
    l.debug('Buffer size: %d', CONFIG.buffer_size);

    //Start Stream API
    var i=0;
    var buffer = [];

    function addTobuffer(tweet){
        buffer.push(tweet);
        if (buffer.length >= CONFIG.buffer_size) {
            bufferFlush();
        }
    }

    function bufferFlush(){
        if (!buffer.length){
            return;
        }

        var tweet_array = buffer;
        buffer = [];

        db.TwitterModel.addTweets(tweet_array, function(err, data){
            if(err) {
                l.error(err);
            }
            i = i + tweet_array.length;
            l.debug('%d tweets inserted so far', i);
        });
    }

    ts.startStream(function(tweet) {
        // If there is a locations filter, then ignore tweets without valid coordinates
        if (hasCoordinates(tweet)) {
            //The hashtags AND location filter IS INDEED A OR FILTER!! in the stream API..
            //so we have to filter hashtags programatically:
            if (tags_array.length === 0 || hasHashTags(tweet, tags_array)) {
                addTobuffer(tweet);
            }
        }
    });

    // flush the buffer each 5 seconds
    setInterval(bufferFlush,5* 1000);
});



var hasHashTags = function(tweet, tags_array) {
    if (!tweet.hasOwnProperty('entities') ||Â !tweet.entities.hasOwnProperty('hashtags')){
        return false;
    }
    
    var hashtags = tweet.entities.hashtags;
    
    for (i in hashtags) {
        if (tags_array.indexOf(hashtags[i].text.toLowerCase()) !== -1) {
            return true;
        }
    }
    return false;
}

var hasCoordinates = function(tweet){
    return (tweet.coordinates != null || (tweet.place != null && typeof tweet.place.bounding_box != 'undefined'));
};
